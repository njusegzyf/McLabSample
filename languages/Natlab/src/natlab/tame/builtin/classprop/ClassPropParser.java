package natlab.tame.builtin.classprop;

import natlab.tame.builtin.classprop.ast.CP;
import natlab.tame.builtin.classprop.ast.CPChain;
import natlab.tame.builtin.classprop.ast.CPCoerce;
import natlab.tame.builtin.classprop.ast.CPList;
import natlab.tame.builtin.classprop.ast.CPMap;
import natlab.tame.builtin.classprop.ast.CPNum;
import natlab.tame.builtin.classprop.ast.CPTypeString;
import natlab.tame.builtin.classprop.ast.CPUnion;
import beaver.Action;
import beaver.Parser;
import beaver.ParsingTables;
import beaver.Symbol;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.2
 * from the grammar specification "classprop.grammar".
 */
public class ClassPropParser extends Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short LPAREN = 1;
		static public final short COERCE = 2;
		static public final short TYPESTRING = 3;
		static public final short NUMBER = 4;
		static public final short ID = 5;
		static public final short OROR = 6;
		static public final short QUESTION = 7;
		static public final short MULT = 8;
		static public final short RPAREN = 9;
		static public final short OR = 10;
		static public final short COMMA = 11;
		static public final short ARROW = 12;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9ojaJjFmq0GXETiuoGOXuGtuP66XYOD4gAXe0aI4WWf1QAWGmZ#1J#PDmG8oznwapkeSzP" +
		"tEpVhk$Ek0ToXXKMieubv4JGmYm9pgACMV3fZFtZJLZbI9F8WJtfNoRioFjxTnWgsg6Oqaw" +
		"Ej$Z8MEA#gti0QOu4bRA8ZZt18k2$Z3h2EEa#hJWn#EV63DsrLMeNX6t8#fNMqK5LbckOt$" +
		"cWV7QE37zrx3QmRMjSnwNXFE7oU57vjxnsH7N8MURjaOFgQz4YVx95Bys$80RcozI6vDRqV" +
		"dTMtkx$8Y3ABSZNRTn5v9sDjwrEBv$$yGLo3nIucGqRopVc7ztxAaEf3tkLDCw$HMoyMdyt" +
		"m$y6ngwdXsDia8jLULtZjUvznboCfshzhpKg5");

	private final Action[] actions;

	public ClassPropParser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			new Action() {	// [0] cases = list.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final CPList l = (CPList) _symbol_l.value;
					 return l.asUnion();
				}
			},
			new Action() {	// [1] expr = clause.a ARROW clause.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final CP a = (CP) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final CP b = (CP) _symbol_b.value;
					 return new CPMap   (a, b);
				}
			},
			new Action() {	// [2] expr = expr.a OROR expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final CP a = (CP) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final CP b = (CP) _symbol_b.value;
					 return new CPUnion (a, b);
				}
			},
			Action.RETURN,	// [3] expr = clause
			new Action() {	// [4] clause = clause.a QUESTION
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final CP a = (CP) _symbol_a.value;
					 return Functions.get("?",new CPList(a,null));
				}
			},
			new Action() {	// [5] clause = clause.a MULT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final CP a = (CP) _symbol_a.value;
					 return Functions.get("*",new CPList(a,null));
				}
			},
			new Action() {	// [6] clause = clause.a clause.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final CP a = (CP) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 2];
					final CP b = (CP) _symbol_b.value;
					 return new CPChain(a,b);
				}
			},
			new Action() {	// [7] clause = clause.a OR clause.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final CP a = (CP) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final CP b = (CP) _symbol_b.value;
					 return new CPUnion (a, b);
				}
			},
			new Action() {	// [8] clause = NUMBER.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Number n = (Number) _symbol_n.value;
					 return new CPNum(n.intValue());
				}
			},
			new Action() {	// [9] clause = ID.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_s = _symbols[offset + 1];
					final String s = (String) _symbol_s.value;
					 return Functions.get(s);
				}
			},
			new Action() {	// [10] clause = LPAREN expr.e RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 2];
					final CP e = (CP) _symbol_e.value;
					 return e;
				}
			},
			new Action() {	// [11] clause = COERCE LPAREN expr.a COMMA expr.b RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final CP a = (CP) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final CP b = (CP) _symbol_b.value;
					 return new CPCoerce(a,b);
				}
			},
			new Action() {	// [12] clause = TYPESTRING LPAREN expr.a RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final CP a = (CP) _symbol_a.value;
					 return new CPTypeString(a);
				}
			},
			new Action() {	// [13] list = expr.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 1];
					final CP e = (CP) _symbol_e.value;
					 return new CPList(e,null);
				}
			},
			new Action() {	// [14] list = expr.a COMMA list.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final CP a = (CP) _symbol_a.value;
					final Symbol _symbol_l = _symbols[offset + 3];
					final CPList l = (CPList) _symbol_l.value;
					 return new CPList(a,l);
				}
			}
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
